---
export interface Props {
  // Porcentaje que no debe superar a lo ancho (1-100)
  ancho?: number;
  // Porcentaje que no debe superar a lo alto (1-100)
  alto?: number;
}

const { ancho, alto } = Astro.props;
---

<div id="contenedorMapaDetalle">
  <div id="menuAños"></div>
  <h2 id="titulo"></h2>
  <svg class="mapaDetalle" data-proporciones={JSON.stringify({ ancho, alto })}>
    <defs>
      <pattern id="sinInfo" patternUnits="userSpaceOnUse" width="3.5" height="3.5" patternTransform="rotate(45)">
        <line x1="0" y="0" x2="0" y2="3.5" stroke="#46484A" stroke-width="1"></line>
      </pattern>
    </defs>

    <g id="departamento"></g>
  </svg>
  <div id="infoDetalle">
    <p class="nombre"></p>
  </div>
</div>

<script>
  import { crearLinea, escalaColores, escalaCoordenadas, extremosLugar } from '@enflujo/alquimia';
  import type { ExtremosCoordenadas } from '@/tipos';
  import type { FeatureCollection } from 'geojson';
  import { datosMunicipios, deptoSeleccionado, añoSeleccionado, datosIndicadorMun } from '@/utilidades/cerebro';
  import type { IMapearCoordenadas } from '@enflujo/alquimia/libreria/modulos/tipos';

  const mapaDetalle = document.querySelector('.mapaDetalle') as HTMLDivElement;
  const departamento = document.getElementById('departamento');
  const infoDetalle = document.getElementById('infoDetalle');
  const infoMunucipio = infoDetalle.querySelector('.nombre') as HTMLParagraphElement;
  const titulo = document.getElementById('titulo');

  let mapearCoordenadas: IMapearCoordenadas;
  let extremosGeo: ExtremosCoordenadas;
  const proporciones = JSON.parse(mapaDetalle.dataset.proporciones);
  const color = escalaColores(0, 100, '#DE2E56', '#94FF1A');
  let zonas = {};
  let ancho = 0;
  let alto = 0;
  let coordenadasAncho = 0;
  let coordenadasAlto = 0;

  mapaDetalle.onmouseenter = () => {
    infoDetalle.classList.add('visible');
  };
  mapaDetalle.onmouseleave = () => {
    infoDetalle.classList.remove('visible');
  };

  function extremos() {
    mapearCoordenadas = escalaCoordenadas(
      extremosGeo.latitudMin,
      extremosGeo.latitudMax,
      extremosGeo.longitudMin,
      extremosGeo.longitudMax
    );

    coordenadasAncho = extremosGeo.longitudMax - extremosGeo.longitudMin;
    coordenadasAlto = extremosGeo.latitudMax - extremosGeo.latitudMin;
  }

  function calcularPorcentaje(valor: number, porcentaje: number) {
    return valor * (porcentaje / 100);
  }

  /* Función para definir las proporciones iniciales del mapa. */
  function definirPoporciones() {
    if (proporciones.ancho && proporciones.ancho <= 100) {
      ancho = calcularPorcentaje(window.innerWidth * 0.5, proporciones.ancho);
    }

    if (proporciones.alto && proporciones.alto <= 100) {
      alto = calcularPorcentaje(window.innerHeight * 0.5, proporciones.alto);
    }
  }

  function escalar() {
    definirPoporciones();

    // Revisa las proporciones del mapa para que no se deforme
    if (coordenadasAncho > coordenadasAlto) {
      alto = (ancho * (coordenadasAlto / coordenadasAncho)) | 0;
    } else {
      ancho = (alto * (coordenadasAncho / coordenadasAlto)) | 0;
    }

    mapaDetalle.setAttribute('width', `${ancho}`);
    mapaDetalle.setAttribute('height', `${alto}`);

    if (!municipiosFiltrados) return;
    filtrarMunicipios();

    municipiosFiltrados.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zona = zonas[lugar.properties.codigo];
        zona.setAttribute('d', linea);
      }
    });
  }

  let nombreDepto: string;
  let municipiosFiltrados: FeatureCollection;

  deptoSeleccionado.subscribe(async () => {
    nombreDepto = deptoSeleccionado.get();

    if (nombreDepto) {
      titulo.innerText = nombreDepto;
      filtrarMunicipios();

      if (!municipiosFiltrados) return;
      extremosGeo = extremosLugar(municipiosFiltrados);

      extremos();
      crearMapa(municipiosFiltrados, 'municipios');
      escalar();
      pintarMapa(añoSeleccionado.get());
    }
  });

  añoSeleccionado.subscribe(async () => {
    pintarMapa(añoSeleccionado.get());
  });

  function filtrarMunicipios() {
    let municipios = datosMunicipios.value.features.filter((mun) => mun.properties.dep === nombreDepto);

    municipiosFiltrados = {
      type: 'FeatureCollection',
      features: municipios,
    };
  }

  function pintarMapa(año: string) {
    const datos = datosIndicadorMun.get()[año];

    if (!datos) return;

    datos.forEach(([codigo, valor]) => {
      if (zonas[codigo]) {
        if (valor) {
          zonas[codigo].setAttribute('style', `fill: ${color(valor)}`);
        } else {
          zonas[codigo].setAttribute('style', 'fill: url(#sinInfo)');
        }
      } else {
        console.log('No existe lugar con codigo', codigo);
      }
    });
  }

  function crearMapa(datos: FeatureCollection, clase: string) {
    departamento.innerHTML = '';

    datos.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zonaDetalle = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        zonaDetalle.setAttribute('class', `${clase}`);
        zonaDetalle.setAttribute('d', linea);
        zonaDetalle.setAttribute('id', lugar.properties.codigo);
        zonaDetalle.setAttribute('style', 'fill: url(#sinInfo)');
        zonaDetalle.onmousemove = (evento) => {
          const x = evento.clientX;
          const y = evento.clientY - 20;

          infoMunucipio.innerText = `${lugar.properties.nombre}`;

          Object.assign(infoDetalle.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        zonas[lugar.properties.codigo] = zonaDetalle;
        departamento.appendChild(zonaDetalle);
      }
    });
  }

  definirPoporciones();
  window.addEventListener('resize', escalar);
</script>

<style lang="scss">
  #contenedorMapaDetalle {
    width: 30vw;
    margin-left: 3em;

    #infoDetalle {
      position: absolute;
      pointer-events: none;
      opacity: 0;
      max-width: 200px;
      padding: 0.5em;
      font-size: 0.8em;
      font-weight: bold;
      width: fit-content;

      background-color: rgb(253, 253, 250);
      color: black;
      z-index: 9;
      transition: opacity 0.42s ease-out;
      transform: translate(-50%, -105%);

      &.visible {
        opacity: 1;
      }
    }
  }
</style>
