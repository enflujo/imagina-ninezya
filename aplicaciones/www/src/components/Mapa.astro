---
export interface Props {
  // Porcentaje que no debe superar a lo ancho (1-100)
  ancho?: number;
  // Porcentaje que no debe superar a lo alto (1-100)
  alto?: number;
}

const { ancho, alto } = Astro.props;
---

<div id="contenedorMapa">
  <div id="menuAños"></div>

  <svg class="mapa" data-proporciones={JSON.stringify({ ancho, alto })}>
    <defs>
      <pattern id="sinInfo" patternUnits="userSpaceOnUse" width="3.5" height="3.5" patternTransform="rotate(45)">
        <line x1="0" y="0" x2="0" y2="3.5" stroke="#46484A" stroke-width="1"></line>
      </pattern>
    </defs>

    <g id="colombia"></g>
  </svg>
  <div id="informacion">
    <p class="nombre"></p>
  </div>
</div>

<script>
  import { crearLinea, escalaColores, escalaCoordenadas, extremosLugar } from '@enflujo/alquimia';
  import type { ExtremosCoordenadas } from '@/tipos';
  import type { FeatureCollection } from 'geojson';
  import {
    datosColombia,
    datosIndicador,
    listaAños,
    nivel,
    deptoSeleccionado,
    añoSeleccionado,
  } from '@/utilidades/cerebro';
  import type { IMapearCoordenadas } from '@enflujo/alquimia/libreria/modulos/tipos';

  const mapa = document.querySelector('.mapa') as HTMLDivElement;
  const colombia = document.getElementById('colombia');
  const informacion = document.getElementById('informacion');
  const infoMunucipio = informacion.querySelector('.nombre') as HTMLParagraphElement;
  const menuAños = document.getElementById('menuAños') as HTMLDivElement;
  let mapearCoordenadas: IMapearCoordenadas;
  let extremosGeo: ExtremosCoordenadas;
  const proporciones = JSON.parse(mapa.dataset.proporciones);
  const color = escalaColores(0, 100, '#DE2E56', '#94FF1A');
  let zonas = {};
  let ancho = 0;
  let alto = 0;
  let coordenadasAncho = 0;
  let coordenadasAlto = 0;
  let datosParaPintar: FeatureCollection; // Esto puede ser departamentos o municipios

  mapa.onmouseenter = () => {
    informacion.classList.add('visible');
  };
  mapa.onmouseleave = () => {
    informacion.classList.remove('visible');
  };

  function extremos() {
    mapearCoordenadas = escalaCoordenadas(
      extremosGeo.latitudMin,
      extremosGeo.latitudMax,
      extremosGeo.longitudMin,
      extremosGeo.longitudMax
    );

    coordenadasAncho = extremosGeo.longitudMax - extremosGeo.longitudMin;
    coordenadasAlto = extremosGeo.latitudMax - extremosGeo.latitudMin;
  }

  function calcularPorcentaje(valor: number, porcentaje: number) {
    return valor * (porcentaje / 100);
  }

  /* Función para definir las proporciones iniciales del mapa. 
  La saqué de escalar() para que no se hiciera más pequeño cada vez que se dibuja el mapa.*/
  function definirPoporciones() {
    if (proporciones.ancho && proporciones.ancho <= 100) {
      ancho = calcularPorcentaje(window.innerWidth, proporciones.ancho);
    }

    if (proporciones.alto && proporciones.alto <= 100) {
      alto = calcularPorcentaje(window.innerHeight, proporciones.alto);
    }
  }

  function escalar() {
    definirPoporciones();

    // Revisa las proporciones del mapa para que no se deforme
    if (coordenadasAncho > coordenadasAlto) {
      alto = (ancho * (coordenadasAlto / coordenadasAncho)) | 0;
    } else {
      ancho = (alto * (coordenadasAncho / coordenadasAlto)) | 0;
    }

    mapa.setAttribute('width', `${ancho}`);
    mapa.setAttribute('height', `${alto}`);

    if (!datosParaPintar) return;

    datosParaPintar.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zona = zonas[lugar.properties.codigo];
        zona.setAttribute('d', linea);
      }
    });
  }

  let añoActivo: HTMLSpanElement;
  // const datos = datos

  datosIndicador.subscribe(async () => {
    const nuevoNivel = nivel.get();

    if (nuevoNivel === 'mun') {
      const municipios = datosColombia.value['mun'];
      if (!municipios) return;
      extremosGeo = extremosLugar(municipios);

      extremos();
      escalar();

      colombia.innerHTML = '';
      datosParaPintar = municipios;

      crearMapa('municipios');
      if (!añoActivo) return;
      pintarMapa(añoActivo.innerText);
    } else if (nuevoNivel === 'dep') {
      const departamentos = datosColombia.value['dep'];

      if (!departamentos) return;
      extremosGeo = extremosLugar(departamentos);
      extremos();
      escalar();

      colombia.innerHTML = '';
      datosParaPintar = departamentos;
      crearMapa('departamentos');
      if (!añoActivo) return;
      pintarMapa(añoActivo.innerText);
    }
  });

  listaAños.subscribe((lista) => {
    if (!lista.length) return;
    menuAños.innerHTML = '';

    lista.forEach(({ año, conDatos }, i) => {
      const boton = document.createElement('span');
      boton.className = 'botonAño';
      boton.innerText = año;

      // Si no hay datos en ese año, le agrega la clase 'vacio'
      if (!conDatos) {
        boton.classList.add('vacio');
      } else {
        boton.onclick = () => {
          if (añoActivo) {
            añoActivo.classList.remove('activo');
          }

          boton.classList.add('activo');
          añoActivo = boton;
          añoSeleccionado.set(añoActivo.innerText);

          pintarMapa(año);
        };

        if (i === lista.length - 1) {
          boton.click();
        }
      }
      menuAños.appendChild(boton);
    });
  });

  function pintarMapa(año: string) {
    const datos = datosIndicador.get()[año];
    if (!datos) return;

    datos.forEach(([codigo, valor]) => {
      if (zonas[codigo]) {
        if (valor) {
          zonas[codigo].setAttribute('style', `fill: ${color(valor)}`);
        } else {
          zonas[codigo].setAttribute('style', 'fill: url(#sinInfo)');
        }
      } else {
        console.log('No existe lugar con codigo', codigo);
      }
    });
  }

  function crearMapa(clase: string) {
    datosParaPintar.features.forEach((lugar) => {
      if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho, alto);
        const zona = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        zona.setAttribute('class', `${clase}`);
        zona.setAttribute('d', linea);
        zona.setAttribute('id', lugar.properties.codigo);
        zona.setAttribute('style', 'fill: url(#sinInfo)');
        zona.onmousemove = (evento) => {
          const dims = mapa.getBoundingClientRect();
          const x = evento.clientX - dims.x;
          const y = evento.clientY - dims.y;

          if (nivel.get() === 'mun') {
            infoMunucipio.innerText = `${lugar.properties.nombre} (${lugar.properties.dep})`;
          } else {
            infoMunucipio.innerText = `${lugar.properties.nombre}`;

            // Asignar nombre del departamento como deptoSeleccionado al hacer click
            zona.onclick = () => {
              deptoSeleccionado.set(lugar.properties.nombre);
            };
          }

          Object.assign(informacion.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        zonas[lugar.properties.codigo] = zona;
        colombia.appendChild(zona);
      }
    });
  }

  definirPoporciones();
  window.addEventListener('resize', escalar);
</script>

<style lang="scss" is:global>
  #contenedorMapa {
    margin-top: 1em;
    #informacion {
      position: absolute;
      pointer-events: none;
      opacity: 0;
      max-width: 200px;
      padding: 0.5em;
      font-size: 0.8em;
      font-weight: bold;

      background-color: rgb(253, 253, 250);
      color: black;
      z-index: 9;
      transition: opacity 0.42s ease-out;
      transform: translate(-50%, -105%);

      &.visible {
        opacity: 1;
      }
    }

    .botonAño {
      margin-right: 0.3em;
      border: 1px solid;
      cursor: pointer;
      padding: 0.2em;
      transition: all 0.25s ease-in-out;

      &:hover {
        background-color: antiquewhite;
      }

      &.activo {
        background-color: antiquewhite;
      }

      &.vacio {
        background-color: #969696;
        color: antiquewhite;
        pointer-events: none;
      }
    }
  }
</style>
