---
export interface Props {
  // Porcentaje que no debe superar a lo ancho (1-100)
  ancho?: number;
  // Porcentaje que no debe superar a lo alto (1-100)
  alto?: number;
}

const { ancho, alto } = Astro.props;
---

<div id="contenedorMapa">
  <div id="menuAños"></div>

  <svg class="mapa" data-proporciones={JSON.stringify({ ancho, alto })}>
    <defs>
      <pattern id="sinInfo" patternUnits="userSpaceOnUse" width="3.5" height="3.5" patternTransform="rotate(45)">
        <line x1="0" y="0" x2="0" y2="3.5" stroke="#46484A" stroke-width="1"></line>
      </pattern>
    </defs>

    <g id="colombia"></g>
  </svg>
  <div id="informacion">
    <p class="nombre"></p>
    <p class="espdet"></p>
  </div>
</div>

<script>
  import { crearLinea, escalaColores, escalaCoordenadas, extremosLugar } from '@enflujo/alquimia';
  import type { ExtremosCoordenadas } from '@/tipos';
  import type { FeatureCollection } from 'geojson';
  import { indicador, nivel } from '@/utilidades/cerebro';

  const rutaMunicipios = 'https://enflujo.com/bodega/colombia/municipios.json';
  const mapa = document.querySelector('.mapa') as HTMLDivElement;
  const colombia = document.getElementById('colombia');
  const informacion = document.getElementById('informacion');
  const infoMunucipio = informacion.querySelector('.nombre') as HTMLParagraphElement;
  const menuAños = document.getElementById('menuAños') as HTMLDivElement;

  let municipios: FeatureCollection;
  let extremosGeo: ExtremosCoordenadas;
  const proporciones = JSON.parse(mapa.dataset.proporciones);
  const color = escalaColores(0, 100, '#e47d6d', '#00ff9b');
  let zonas = {};

  async function inicio() {
    municipios = await fetch(rutaMunicipios).then((res) => res.json());
    extremosGeo = extremosLugar(municipios);
    escalar();
  }

  function calcularPorcentaje(valor: number, porcentaje: number) {
    return valor * (porcentaje / 100);
  }

  function escalar() {
    let ancho = window.innerWidth;
    let alto = window.innerHeight;
    const mapearCoordenadas = escalaCoordenadas(
      extremosGeo.latitudMin,
      extremosGeo.latitudMax,
      extremosGeo.longitudMin,
      extremosGeo.longitudMax
    );
    const coordenadasAncho = extremosGeo.longitudMax - extremosGeo.longitudMin;
    const coordenadasAlto = extremosGeo.latitudMax - extremosGeo.latitudMin;

    if (proporciones.ancho && proporciones.ancho <= 100) {
      ancho = calcularPorcentaje(ancho, proporciones.ancho);
    }

    if (proporciones.alto && proporciones.alto <= 100) {
      alto = calcularPorcentaje(alto, proporciones.alto);
    }

    // Revisa las proporciones del mapa para que no se deforme
    if (coordenadasAncho > coordenadasAlto) {
      alto = (ancho * (coordenadasAlto / coordenadasAncho)) | 0;
    } else {
      ancho = (alto * (coordenadasAncho / coordenadasAlto)) | 0;
    }

    mapa.setAttribute('width', `${ancho}`);
    mapa.setAttribute('height', `${alto}`);

    colombia.innerHTML = '';
    municipios.features.forEach((municipio) => {
      if (municipio.geometry.type === 'Polygon' || municipio.geometry.type === 'MultiPolygon') {
        const linea = crearLinea(municipio.geometry, mapearCoordenadas, ancho, alto);
        const zona = document.createElementNS('http://www.w3.org/2000/svg', 'path');

        zona.setAttribute('class', 'municipio');
        zona.setAttribute('d', linea);
        zona.setAttribute('id', municipio.properties.codigo);
        zona.setAttribute('style', 'fill: url(#sinInfo)');
        zona.onmousemove = (evento) => {
          const dims = mapa.getBoundingClientRect();
          const x = evento.clientX - dims.x;
          const y = evento.clientY - dims.y;

          infoMunucipio.innerText = `${municipio.properties.nombre}, (${municipio.properties.dep})`;

          Object.assign(informacion.style, {
            top: `${y}px`,
            left: `${x}px`,
          });
        };

        zonas[municipio.properties.codigo] = zona;
        colombia.appendChild(zona);
      }
    });

    mapa.onmouseenter = () => {
      informacion.classList.add('visible');
    };
    mapa.onmouseleave = () => {
      informacion.classList.remove('visible');
    };
  }

  inicio();
  let añoActivo;

  nivel.set('dep');
  nivel.subscribe(async (nivel) => {
    indicador.subscribe(async (nombreArchivo) => {
      if (!nombreArchivo) return;
      const datosIndicador = await fetch(`${import.meta.env.BASE_URL}/datos/${nombreArchivo}-${nivel}.json`).then(
        (res) => res.json()
      );
      const años = Object.keys(datosIndicador);

      // Lista de años que tienen datos
      const añosConDatos = [];
      // Para armar el menú de años: lista de años con y sin datos entre el primer y el último elemento de añosConDatos[]
      const listaAños = [];

      // Agregar cada año con datos a la lista añosConDatos
      años.forEach((año) => {
        if (datosIndicador[año].length) {
          añosConDatos.push(año);
        }
      });

      // Armar lista de años con y sin datos para el menú de años
      for (let i = 0; i < añosConDatos.length + 2; i++) {
        listaAños.push(+añosConDatos[0] + i);
      }

      menuAños.innerHTML = '';

      listaAños.forEach((año, i) => {
        const boton = document.createElement('span');
        boton.className = 'botonAño';
        boton.innerText = año;

        // Si no hay datos en ese año, le agrega la clase 'vacio'
        if (datosIndicador[año]) {
          if (!datosIndicador[año].length) {
            boton.classList.add('vacio');
          }
          if (datosIndicador[año].length) {
            boton.onclick = () => {
              if (añoActivo) {
                añoActivo.classList.remove('activo');
              }

              boton.classList.add('activo');
              añoActivo = boton;
              const datos = datosIndicador[año];

              datos.forEach(([codigo, valor]) => {
                if (zonas[codigo]) {
                  if (valor) {
                    zonas[codigo].setAttribute('style', `fill: ${color(valor)}`);
                  } else {
                    zonas[codigo].setAttribute('style', 'fill: url(#sinInfo)');
                  }
                } else {
                  console.log('No existe lugar con codigo', codigo);
                }
              });
            };
          }

          if (i === listaAños.length - 1) {
            boton.click();
          }
        }
        menuAños.appendChild(boton);
      });
    });
  });

  window.onresize = escalar;
</script>

<style lang="scss" is:global>
  #contenedorMapa {
    #informacion {
      position: absolute;
      pointer-events: none;
      opacity: 0;
      max-width: 200px;
      padding: 0.5em;
      font-size: 0.8em;
      font-weight: bold;

      background-color: rgb(253, 253, 250);
      color: black;
      z-index: 9;
      transition: opacity 0.42s ease-out;
      transform: translate(-50%, -105%);

      &.visible {
        opacity: 1;
      }
    }

    .botonAño {
      margin-right: 0.3em;
      border: 1px solid;
      cursor: pointer;
      padding: 0.2em;
      transition: all 0.25s ease-in-out;

      &:hover {
        background-color: antiquewhite;
      }

      &.activo {
        background-color: antiquewhite;
      }

      &.vacio {
        background-color: #969696;
        color: antiquewhite;
        pointer-events: none;
      }
    }
  }
</style>
