---
interface Props {
  // Porcentaje que no debe superar a lo ancho (1-100)
  ancho?: number;
  // Porcentaje que no debe superar a lo alto (1-100)
  alto?: number;
}

const { ancho, alto } = Astro.props;
---

<div id="contenedorMapa">
  <svg class="mapa" data-proporciones={JSON.stringify({ ancho, alto })}>
    <defs>
      <pattern id="sinInfo" patternUnits="userSpaceOnUse" width="3.5" height="3.5" patternTransform="rotate(45)">
        <line x1="0" y1="0" x2="0" y2="3.5" stroke="#46484A" stroke-width="1"></line>
      </pattern>
    </defs>

    <g id="colombia"></g>
    <g id="seleccionados"></g>
  </svg>
  <div id="leyendaMapa">
    <span class="marcaLeyenda alerta"></span>
    <span class="marcaLeyenda umbral"></span>
    <span class="marcaLeyenda positivo"></span>
  </div>
</div>

<script>
  import { calcularPorcentaje, crearLinea } from '@/utilidades/ayudas';
  import { escalaCoordenadas, extremosLugar } from '@enflujo/alquimia';
  import type { DatosAño, ExtremosCoordenadas } from '@/tipos';
  import type { FeatureCollection } from 'geojson';
  import {
    datosColombia,
    nivel,
    añoSeleccionado,
    lugaresSeleccionados,
    datosMapaMunicipio,
    datosIndicadorDep,
    datosIndicadorMunicipio,
    color,
    actualizarUrl,
    revisarDepartamentos,
    datosNal,
    umbral,
    coloresCategorias,
  } from '@/utilidades/cerebro';
  import type { IMapearCoordenadas } from '@enflujo/alquimia/libreria/modulos/tipos';
  import { colorNegativo, colorNeutro, colorPositivo } from '@/utilidades/constantes';

  const contenedorMapa = document.getElementById('contenedorMapa');

  if (contenedorMapa) {
    const mapa = document.querySelector('.mapa') as HTMLDivElement;
    const colombia = document.getElementById('colombia') as HTMLElement & SVGGElement;
    const seleccionados = document.getElementById('seleccionados') as HTMLElement & SVGGElement;
    const informacion = document.getElementById('informacion');
    const leyendaMapa = document.getElementById('leyendaMapa');

    let mapearCoordenadas: IMapearCoordenadas;
    let extremosGeo: ExtremosCoordenadas;
    const proporciones = JSON.parse(mapa.dataset.proporciones);
    const visualizaciones = document.getElementById('visualizaciones');
    const unidad = visualizaciones.dataset.unidad.toLocaleLowerCase();

    let zonas = {};
    let ancho = 0;
    let alto = 0;
    let coordenadasAncho = 0;
    let coordenadasAlto = 0;
    let datosParaPintar: FeatureCollection; // Esto puede ser departamentos o municipios

    mapa.onmousemove = (evento) => {
      const { top, height } = informacion.getBoundingClientRect();
      const x = evento.clientX;
      const y = evento.clientY;
      console.log(top);
      Object.assign(informacion.style, {
        top: `${top < 10 ? y + height + 10 : y}px`,
        left: `${x}px`,
      });
    };

    function extremos() {
      mapearCoordenadas = escalaCoordenadas(
        extremosGeo.latitudMin,
        extremosGeo.latitudMax,
        extremosGeo.longitudMin,
        extremosGeo.longitudMax
      );

      coordenadasAncho = extremosGeo.longitudMax - extremosGeo.longitudMin;
      coordenadasAlto = extremosGeo.latitudMax - extremosGeo.latitudMin;
    }

    /* Función para definir las proporciones iniciales del mapa. 
  La saqué de escalar() para que no se hiciera más pequeño cada vez que se dibuja el mapa.*/
    function definirPoporciones() {
      if (proporciones.ancho && proporciones.ancho <= 100) {
        ancho = calcularPorcentaje(window.innerWidth, proporciones.ancho);
      }

      if (proporciones.alto && proporciones.alto <= 100) {
        alto = calcularPorcentaje(window.innerHeight, proporciones.alto);
      }
    }

    function escalar() {
      definirPoporciones();

      // Revisa las proporciones del mapa para que no se deforme
      if (coordenadasAncho > coordenadasAlto) {
        alto = (ancho * (coordenadasAlto / coordenadasAncho)) | 0;
      } else {
        ancho = (alto * (coordenadasAncho / coordenadasAlto)) | 0;
      }

      mapa.setAttribute('width', `${ancho}`);
      mapa.setAttribute('height', `${alto}`);

      if (!datosParaPintar) return;

      datosParaPintar.features.forEach((lugar) => {
        if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
          const escalaDims = lugar.properties.codigo === '88' ? 12 : 1;
          const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho * escalaDims, alto * escalaDims);
          const zona = zonas[lugar.properties.codigo];
          zona.svg.setAttribute('d', linea);
        }
      });
    }

    nivel.subscribe(async (nuevoNivel) => {
      if (!nuevoNivel) return;

      if (nuevoNivel === 'mun') {
        const municipios = await datosMapaMunicipio();
        if (!municipios) return;
        extremosGeo = extremosLugar(municipios);
        extremos();
        escalar();

        colombia.innerHTML = '';
        seleccionados.innerHTML = '';
        datosParaPintar = municipios;

        crearMapa();
        if (!añoSeleccionado.value) return;
        pintarMapa(añoSeleccionado.value);
      } else if (nuevoNivel === 'dep') {
        const departamentos = datosColombia.value['dep'];

        if (!departamentos) return;
        extremosGeo = extremosLugar(departamentos);
        extremos();
        escalar();

        colombia.innerHTML = '';
        seleccionados.innerHTML = '';
        datosParaPintar = departamentos;
        crearMapa();
        if (!añoSeleccionado.value) return;
        pintarMapa(añoSeleccionado.value);
      }
    });

    añoSeleccionado.subscribe((año) => {
      if (!año || !datosParaPintar) return;
      pintarMapa(año);
    });

    async function pintarMapa(año: string) {
      const nivelActual = nivel.value;

      const datos =
        nivelActual === 'dep'
          ? ((await datosIndicadorDep(año)) as DatosAño)
          : ((await datosIndicadorMunicipio(año)) as DatosAño);

      if (!datos) return;

      // Reiniciar todos sin datos antes de pintar de nuevo
      for (const codigo in zonas) {
        zonas[codigo].svg.setAttribute('style', 'fill: url(#sinInfo)');
        zonas[codigo].valor = null;
      }

      datos.forEach(([codigo, valor]) => {
        const zona = zonas[codigo];
        if (zona) {
          if (valor) {
            if (datosNal.value.categorias) {
              zona.svg.setAttribute('style', `fill: ${color(valor)}`);
              zona.valor = valor;
            } else {
              zona.svg.setAttribute('style', `fill: ${color(valor)}`);
              zona.valor = +valor;
            }
          } else {
            zona.svg.setAttribute('style', 'fill: url(#sinInfo)');
            zona.valor = null;
          }
        } else {
          console.log('No existe lugar con codigo', codigo);
        }
      });
    }

    function crearMapa() {
      const lugaresActuales = lugaresSeleccionados.value;
      const { estructura, ascendente } = datosNal.value;
      zonas = {};

      if (!umbral) {
        leyendaMapa.style.background = `linear-gradient(90deg, ${
          ascendente ? colorPositivo : colorNegativo
        } 0%, ${colorNeutro} 100%)`;
        leyendaMapa.querySelector<HTMLSpanElement>('.alerta').innerText = ascendente ? 'Positivo' : 'Alerta';
        leyendaMapa.querySelector<HTMLSpanElement>('.umbral').classList.add('invisible');
        leyendaMapa.querySelector<HTMLSpanElement>('.positivo').innerText = '0';
      } else {
        leyendaMapa.style.background = `linear-gradient(90deg, ${colorNegativo} 0%, ${colorNeutro} 50%, ${colorPositivo} 100%)`;
        leyendaMapa.querySelector<HTMLSpanElement>('.alerta').innerText = 'Alerta';
        leyendaMapa.querySelector<HTMLSpanElement>('.umbral').innerText = 'Meta';
        leyendaMapa.querySelector<HTMLSpanElement>('.positivo').innerText = 'Positivo';
      }

      datosParaPintar.features.forEach((lugar) => {
        if (lugar.geometry.type === 'Polygon' || lugar.geometry.type === 'MultiPolygon') {
          const escalaDims = lugar.properties.codigo === '88' ? 12 : 1;
          const linea = crearLinea(lugar.geometry, mapearCoordenadas, ancho * escalaDims, alto * escalaDims);

          const zona = document.createElementNS('http://www.w3.org/2000/svg', 'path');
          const estaSeleccionada = lugaresActuales.find((obj) => obj.codigoDep === lugar.properties.codigo);

          zona.setAttribute('class', `lugar${estaSeleccionada ? ' seleccionada' : ''}`);
          zona.setAttribute('d', linea);
          zona.setAttribute('id', lugar.properties.codigo);
          zona.setAttribute('style', 'fill: url(#sinInfo)');
          zona.setAttribute('shape-rendering', 'geometricPrecision');
          zona.setAttribute('data-color', lugar.properties.color);

          zonas[lugar.properties.codigo] = { svg: zona, valor: null };
          colombia.appendChild(zona);

          zona.onmouseenter = () => {
            const valor = zonas[lugar.properties.codigo].valor;

            informacion.classList.add('visible');

            // Cuando es por categorías
            if (datosNal.value.categorias) {
              if (valor) {
                const colores = { c1: '', c2: '', c3: '', c4: '', c5: '', c6: '', c7: '', c8: '' };
                for (const categoria in coloresCategorias) {
                  colores[categoria] = `rgb(${coloresCategorias[categoria].join(',')})`;
                }
                informacion.classList.add('categorias');
                informacion.innerHTML = `<p class="negrita">${lugar.properties.nombre}</p> 
              <p class="infoCategoria">
                <span class="valorMiniColombina">Colegio: ${valor.c1 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c1 || 0}%;background-color:${colores.c1}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Casa: ${valor.c2 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c2 || 0}%;background-color:${colores.c2}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Trabajo: ${valor.c3 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c3 || 0}%;background-color:${colores.c3}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Niñero/a: ${valor.c4 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c4 || 0}%;background-color:${colores.c4}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Mayor: ${valor.c5 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c5 || 0}%;background-color:${colores.c5}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Menor: ${valor.c6 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c6 || 0}%;background-color:${colores.c6}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Solo: ${valor.c7 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c7 || 0}%;background-color:${colores.c7}"></span>  
              </p>
              <p class="infoCategoria">
                <span class="valorMiniColombina">Otro: ${valor.c8 || 0}%</span>
                <span class="miniColombina" style="width:${valor.c8 || 0}%;background-color:${colores.c8}"></span>  
              </p>`;
              } else {
                informacion.innerHTML = '';
              }
            } else {
              // Cuando es por valor único, la mayoría de indicadores usan este
              let descripcion = '';

              if (valor) {
                if (estructura === 'porcentaje') {
                  descripcion = '%';
                } else if (estructura === 'tasa') {
                  descripcion = ` ${unidad}`;
                }
              }

              const textoInfo = !valor ? 'Sin datos' : `${valor}${descripcion}`;
              if (nivel.get() === 'mun') {
                informacion.innerText = `${lugar.properties.nombre} (${lugar.properties.dep}): ${textoInfo}`;
              } else {
                informacion.innerText = `${lugar.properties.nombre}: ${textoInfo}`;
                zona.classList.add('departamento');
              }
            }
          };

          zona.onmouseleave = () => {
            // informacion.classList.remove('visible');
          };

          // Asignar nombre del departamento a la lista de lugares seleccionados
          zona.onclick = () => {
            const nivelActual = nivel.value;
            const params = new URLSearchParams(window.location.search);
            const deps = params.get('deps');
            const codigoDep = nivelActual === 'dep' ? lugar.properties.codigo : lugar.properties.codigo.substring(0, 2);
            const parametros: { nombre: string; valor: string }[] = [];
            const codigosDep = deps ? deps.split(',') : [];
            const posicionLugar = codigosDep.findIndex((codigo) => codigo === codigoDep);

            if (posicionLugar >= 0) {
              codigosDep.splice(posicionLugar, 1);
            } else {
              codigosDep.push(codigoDep);
            }

            parametros.push({ nombre: 'deps', valor: codigosDep.join(',') });

            if (nivelActual === 'mun') {
              const muns = params.get('mun');
              const codigoMun = lugar.properties.codigo;
              const codigosMun = muns ? muns.split(',') : [];
              const posicionLugar = codigosMun.findIndex((codigo) => codigo === codigoMun);

              if (posicionLugar >= 0) {
                codigosMun.splice(posicionLugar, 1);
              } else {
                codigosMun.push(codigoMun);
              }

              parametros.push({ nombre: 'muns', valor: codigosMun.join(',') });
            }

            actualizarUrl(parametros);
            revisarDepartamentos();
          };
        }
      });
    }

    lugaresSeleccionados.subscribe((lugares) => {
      const elmentosSeleccionados = seleccionados.querySelectorAll<SVGPathElement>('.lugar');

      if (elmentosSeleccionados.length) {
        elmentosSeleccionados.forEach(quitarSeleccionZona);
      }

      const nivelActual = nivel.value;

      if (nivelActual === 'dep') {
        if (lugares.length) {
          lugares.forEach((lugar) => {
            const zona = zonas[lugar.codigoDep].svg;
            seleccionarZona(zona);
          });
        }
      } else {
        const params = new URLSearchParams(window.location.search);
        const muns = params.get('muns');
        if (muns) {
          muns.split(',').forEach((codigo) => {
            const zona = zonas[codigo];
            if (zona) {
              seleccionarZona(zona.svg);
            }
          });
        }
      }
    });

    function quitarSeleccionZona(elemento: SVGPathElement) {
      if (!elemento) return;
      elemento.classList.remove('seleccionada');
      elemento.setAttribute('stroke', 'var(--moradoProfundo)');
      seleccionados.removeChild(elemento);
      colombia.appendChild(elemento);
    }

    function seleccionarZona(elemento: SVGPathElement) {
      if (!elemento) return;
      elemento.classList.add('seleccionada');
      // color del borde del lugar seleccionado
      elemento.setAttribute('stroke', elemento.dataset.color);
      colombia.removeChild(elemento);
      seleccionados.appendChild(elemento);
    }

    definirPoporciones();
    window.addEventListener('resize', escalar);
  }
</script>

<style lang="scss" is:global>
  @import '@/scss/constantes';

  #contenedorMapa {
    margin-top: 3em;
    margin-left: 0em;
    stroke: var(--moradoProfundo);
    stroke-opacity: 0.5;
    stroke-width: 0.5px;

    .departamento {
      cursor: pointer;
    }

    .seleccionada {
      stroke-opacity: 1;
      stroke-width: 2px;
    }
  }

  #informacion {
    pointer-events: none;
    p {
      margin: 0;
    }

    .negrita {
      font-weight: bold;
    }

    .infoCategoria {
      font-size: 0.65em;
      margin-top: 3px;
      position: relative;
    }

    .valorMiniColombina {
      z-index: 2;
    }

    .miniColombina {
      display: block;
      position: absolute;
      top: 0;
      height: 0.85em;
      opacity: 0.3;
      z-index: 1;
    }
  }

  /// ✂️ Cortes pantalla
  @media screen and (min-width: $corte1) {
    #contenedorMapa {
      margin: 1em;
    }
  }

  @media screen and (min-width: $corte3) {
  }
</style>

<style lang="scss">
  #leyendaMapa {
    width: 200px;
    height: 7px;
    position: relative;
    margin: 1em auto 0 auto;
    display: block;

    .marcaLeyenda {
      font-size: 0.55em;
      position: absolute;
      top: -1.1em;
    }

    .umbral {
      transform: translateX(-50%);
      left: 50%;
    }

    .positivo {
      right: 0;
    }
  }
</style>
