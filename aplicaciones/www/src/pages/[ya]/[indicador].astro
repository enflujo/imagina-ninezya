---
import datos from '@/datosVisibles/indicadores';
import Plantilla from '@/plantillas/Principal.astro';
import MenuAnios from '@/componentes/MenuAnios.astro';
import SelectorNivel from '@/componentes/SelectorNivel.astro';
import Mapa from '@/componentes/Mapa.astro';
import LineaTiempo from '@/componentes/LineaTiempo.astro';
import type { GetStaticPaths } from 'astro';
import FichaTecnica from '@/componentes/FichaTecnica.astro';
import Buscador from '@/componentes/Buscador.astro';
import DescripcionYa from '@/componentes/DescripcionYa.astro';
import PropuestaIndicador from '@/componentes/PropuestaIndicador.astro';
import type { DatosIndicadoresListaDescripcion } from '@/tipos';

export const getStaticPaths = (() => {
  return datos
    .map((ya) => {
      return ya.indicadores.map((indicador) => {
        return { params: { ya: ya.ruta, indicador: indicador.ruta } };
      });
    })
    .flat();
}) satisfies GetStaticPaths;

const { ya, indicador } = Astro.params;
const posYa = datos.findIndex((instancia) => instancia.ruta === ya);
const datosYa = datos[posYa];
const datosIndicador = datosYa.indicadores.find((instancia) => instancia.ruta === indicador);
const archivosYa: DatosIndicadoresListaDescripcion[] = datosYa.indicadores.map((indicador) => {
  return {
    titulo: indicador.nombre,
    archivo: indicador.archivo,
    umbral: indicador.umbral,
    ruta: `${import.meta.env.BASE_URL}/${datosYa.ruta}/${indicador.ruta}`,
    tieneDatos: indicador.hay_datos,
  };
});
---

<Plantilla titulo={datosIndicador.nombre} conMenu={true}>
  <DescripcionYa
    titulo={`${posYa + 1}. ${datosYa.nombre}`}
    definicion={datosYa.definicion}
    img={datosYa.imagen}
    archivos={archivosYa}
    hayDatos={datosIndicador.hay_datos}
    descripcionAbierta={false}
    anchoCompleto={false}
  />
  {
    datosIndicador.hay_datos ? (
      <>
        <div
          id="visualizaciones"
          class="columna"
          data-archivo={datosIndicador.archivo}
          data-umbral={datosIndicador.umbral}
          data-unidad={datosIndicador.unidad}
          data-categorias={JSON.stringify(datosIndicador.categorias)}
        >
          <div id="secionSuperior">
            <div id="filtros">
              <div id="indicadorSeleccionado">
                <h2 id="nombreYa">{datosYa.nombre}</h2>
                <h3 id="nombreIndicador">{datosIndicador.nombre}</h3>

                <span id="abrirFicha">?</span>
                <div id="contenedorInfoAdicional">
                  <FichaTecnica rutaYa={datosYa.ruta} rutaIndicador={datosIndicador.ruta} />
                </div>
              </div>

              <p id="descripcionIndicador">{datosIndicador.explicacion}</p>
              <Buscador />

              <SelectorNivel />
              <MenuAnios />
            </div>
            <div id="mapa">
              <Mapa ancho={30} alto={45} />
            </div>
          </div>

          {datosIndicador.unidad === 'Categorias' ? (
            <div>
              <p>Categorias</p>
            </div>
          ) : (
            <LineaTiempo alto={25} meta={datosIndicador.explicacion_umbral} umbral={datosIndicador.umbral} />
          )}
        </div>

        <div id="comparativo" class="columna" />
        <div id="informacion" />
      </>
    ) : (
      <PropuestaIndicador />
    )
  }
</Plantilla>

<script>
  import CategoriasRadiales from '@/componentes/CategoriasRadiales';
  import MapaDetalle from '@/componentes/MapaDetalle';
  import { añoSeleccionado, lugaresSeleccionados, cargarIndicador, datosNal } from '@/utilidades/cerebro';
  const visualizaciones = document.getElementById('visualizaciones');

  if (visualizaciones) {
    const comparativo = document.getElementById('comparativo') as HTMLDivElement;
    const botonFicha = document.getElementById('abrirFicha') as HTMLSpanElement;
    const infoAdicional = document.getElementById('contenedorInfoAdicional') as HTMLDivElement;
    const botonesCerrar = document.querySelectorAll('.cerrarFicha');

    if (botonFicha) {
      botonFicha.addEventListener('click', () => {
        infoAdicional.classList.toggle('abierta');
      });
    }

    async function inicio() {
      // Acá se cargan los datos nacionales y departamentales que son los necesarios para la vista inicial.
      await cargarIndicador();
    }

    inicio().catch(console.error);

    añoSeleccionado.subscribe(async () => {
      const existentes = comparativo.querySelectorAll<MapaDetalle>('.mapita');

      if (existentes && existentes.length) {
        existentes.forEach((mapita) => {
          mapita.pintarMapa();
        });
      }
    });

    window.addEventListener('resize', () => {
      const existentes = comparativo.querySelectorAll<MapaDetalle>('.mapita');

      if (existentes && existentes.length) {
        existentes.forEach((mapita) => {
          mapita.escalar();
        });
      }
    });

    lugaresSeleccionados.subscribe(async (lista) => {
      const existentes = comparativo.querySelectorAll<MapaDetalle>('.mapita');

      if (lista.length) {
        for (const mapa of lista) {
          const { nombre, codigoDep, color } = mapa;
          const codigo = codigoDep;
          let existeLugarEnDOM = false;

          existentes.forEach((mapita) => {
            if (mapita.id === `${codigo}`) {
              existeLugarEnDOM = true;
            }

            // Borrar si no está en la lista
            if (!lista.find((lugar) => lugar.codigoDep === mapita.id)) {
              if (comparativo.contains(mapita)) {
                comparativo.removeChild(mapita);
              }
            }
          });

          if (!existeLugarEnDOM) {
            const mapita = datosNal.value.categorias
              ? new CategoriasRadiales(JSON.parse(visualizaciones.dataset.categorias))
              : new MapaDetalle();

            mapita.className = 'mapita';
            mapita.id = `${codigo}`;
            mapita.agregarTitulo(nombre);

            await mapita.crearMapa();
            mapita.definirColor(color);
            mapita.escalar();
            mapita.pintarMapa();
            comparativo.appendChild(mapita);
          }
        }
      } else {
        comparativo.innerHTML = '';
      }
    });

    /**
     * Ficha Técnica
     */

    const abrirFicha = document.getElementById('abrirFicha');

    // Cerrar ficha al hacer click afuera
    document.body.addEventListener('click', (evento) => {
      if (evento.target === abrirFicha) return;

      if (!(infoAdicional === evento.target || infoAdicional.contains(evento.target as Node))) {
        infoAdicional.classList.remove('abierta');
      }
    });

    // Cerrar ficha con botón cerrar
    botonesCerrar.forEach((boton) => {
      boton.addEventListener('click', (evento) => {
        infoAdicional.classList.remove('abierta');
      });
    });
  }
</script>

<style lang="scss">
  @import '@/scss/constantes';

  #visualizaciones {
    position: relative;
    width: 90%;
  }

  #secionSuperior {
    display: flex;
    flex-direction: column;
  }

  #filtros {
    // display: flex;
  }

  #contenedorInfoAdicional {
    width: 60%;
    top: 8%;
    left: 15%;
    display: none;
    position: absolute;
    justify-content: space-around;
    background-color: var(--blancoMarfil);
    &.abierta {
      display: flex;
    }
  }

  #descripcionIndicador {
    border: 1px solid var(--uvaNinezYa);
    padding: 1em;
    color: var(--azulViejo);
    font-size: 0.85em;
    margin-top: 0;
    width: 60%;
    min-width: 250px;
    font-variation-settings:
      'MONO' 0,
      'CASL' 0,
      'wght' 433,
      'slnt' 0,
      'CRSV' 0;
  }

  #indicadorSeleccionado {
    color: var(--uvaNinezYa);
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    font-size: 1em;
    min-width: 250px;
    width: 60%;

    #nombreYa {
      flex-basis: 100%;
      background-color: var(--uvaNinezYa);
      color: white;
      padding: 0.3em;
      margin: 0;
      border: 1px solid var(--uvaNinezYa);
    }

    #nombreIndicador {
      flex-basis: 100%;
      padding: 0.3em;
      margin: 0;
      border: 1px solid var(--uvaNinezYa);
      color: var(--azulViejo);
    }

    #abrirFicha {
      display: block;
      position: relative;
      left: 96%;
      bottom: 10px;
      background-color: var(--blancoMarfil);
      border-radius: 50%;
      padding: 0.18em 0.2em;
      width: 1.4em;
      height: 1.4em;
      text-align: center;
      font-size: 0.8em;
      border: solid 1px var(--azulViejo);
      color: var(--azulViejo);
      cursor: pointer;
    }
  }

  /// ✂️ Cortes pantalla
  @media screen and (min-width: $corte1) {
    #descripcionIndicador {
      min-width: 250px;
    }
  }
  @media screen and (min-width: $corte2) {
    #secionSuperior {
      flex-direction: row;
    }

    #contenedorInfoAdicional {
      left: 0%;
    }
  }

  @media screen and (min-width: $corte3) {
  }

  @media screen and (min-width: $corte4) {
    #descripcionIndicador {
      margin-top: 1em;
      font-size: 1em;
    }
    #indicadorSeleccionado {
      align-items: stretch;
      flex-direction: column;

      #nombreYa {
        width: 100%;
      }
    }
  }
</style>
